package unii.draft.mtg.parings.database.model;

import android.support.annotation.Nullable;

import java.util.List;
import unii.draft.mtg.parings.database.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "PLAYER".
 */
public class Player {

    private Long id;
    private String PlayerName;

    /** Used to resolve relations */
    @Nullable
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Nullable
    private transient PlayerDao myDao;

    @Nullable
    private List<PlayerDraftJoinTable> Players;

    public Player() {
    }

    public Player(Long id) {
        this.id = id;
    }

    public Player(Long id, String PlayerName) {
        this.id = id;
        this.PlayerName = PlayerName;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(@Nullable DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getPlayerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getPlayerName() {
        return PlayerName;
    }

    public void setPlayerName(String PlayerName) {
        this.PlayerName = PlayerName;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Nullable
    public List<PlayerDraftJoinTable> getPlayers() {
        if (Players == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerDraftJoinTableDao targetDao = daoSession.getPlayerDraftJoinTableDao();
            List<PlayerDraftJoinTable> PlayersNew = targetDao._queryPlayer_Players(id);
            synchronized (this) {
                if(Players == null) {
                    Players = PlayersNew;
                }
            }
        }
        return Players;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetPlayers() {
        Players = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
