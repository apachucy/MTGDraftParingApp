package unii.draft.mtg.parings.database.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import unii.draft.mtg.parings.database.model.Game;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GAME".
*/
public class GameDao extends AbstractDao<Game, Long> {

    public static final String TABLENAME = "GAME";

    /**
     * Properties of entity Game.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Winner = new Property(1, String.class, "Winner", false, "WINNER");
        public final static Property Games = new Property(2, Integer.class, "Games", false, "GAMES");
        public final static Property Round = new Property(3, Integer.class, "Round", false, "ROUND");
        public final static Property Draws = new Property(4, Integer.class, "Draws", false, "DRAWS");
        public final static Property PlayerAPoints = new Property(5, Integer.class, "PlayerAPoints", false, "PLAYER_APOINTS");
        public final static Property PlayerBPoints = new Property(6, Integer.class, "PlayerBPoints", false, "PLAYER_BPOINTS");
        public final static Property PlayerAGameJoinTableId = new Property(7, Long.class, "PlayerAGameJoinTableId", false, "PLAYER_AGAME_JOIN_TABLE_ID");
        public final static Property PlayerBGameJoinTableId = new Property(8, Long.class, "PlayerBGameJoinTableId", false, "PLAYER_BGAME_JOIN_TABLE_ID");
        public final static Property DraftGameJoinTableId = new Property(9, Long.class, "DraftGameJoinTableId", false, "DRAFT_GAME_JOIN_TABLE_ID");
    };

    private Query<Game> player_PlayerAInGameQuery;
    private Query<Game> player_PlayerBInGameQuery;
    private Query<Game> draft_DraftsInGameQuery;

    public GameDao(DaoConfig config) {
        super(config);
    }
    
    public GameDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GAME\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"WINNER\" TEXT," + // 1: Winner
                "\"GAMES\" INTEGER," + // 2: Games
                "\"ROUND\" INTEGER," + // 3: Round
                "\"DRAWS\" INTEGER," + // 4: Draws
                "\"PLAYER_APOINTS\" INTEGER," + // 5: PlayerAPoints
                "\"PLAYER_BPOINTS\" INTEGER," + // 6: PlayerBPoints
                "\"PLAYER_AGAME_JOIN_TABLE_ID\" INTEGER," + // 7: PlayerAGameJoinTableId
                "\"PLAYER_BGAME_JOIN_TABLE_ID\" INTEGER," + // 8: PlayerBGameJoinTableId
                "\"DRAFT_GAME_JOIN_TABLE_ID\" INTEGER);"); // 9: DraftGameJoinTableId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GAME\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Game entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String Winner = entity.getWinner();
        if (Winner != null) {
            stmt.bindString(2, Winner);
        }
 
        Integer Games = entity.getGames();
        if (Games != null) {
            stmt.bindLong(3, Games);
        }
 
        Integer Round = entity.getRound();
        if (Round != null) {
            stmt.bindLong(4, Round);
        }
 
        Integer Draws = entity.getDraws();
        if (Draws != null) {
            stmt.bindLong(5, Draws);
        }
 
        Integer PlayerAPoints = entity.getPlayerAPoints();
        if (PlayerAPoints != null) {
            stmt.bindLong(6, PlayerAPoints);
        }
 
        Integer PlayerBPoints = entity.getPlayerBPoints();
        if (PlayerBPoints != null) {
            stmt.bindLong(7, PlayerBPoints);
        }
 
        Long PlayerAGameJoinTableId = entity.getPlayerAGameJoinTableId();
        if (PlayerAGameJoinTableId != null) {
            stmt.bindLong(8, PlayerAGameJoinTableId);
        }
 
        Long PlayerBGameJoinTableId = entity.getPlayerBGameJoinTableId();
        if (PlayerBGameJoinTableId != null) {
            stmt.bindLong(9, PlayerBGameJoinTableId);
        }
 
        Long DraftGameJoinTableId = entity.getDraftGameJoinTableId();
        if (DraftGameJoinTableId != null) {
            stmt.bindLong(10, DraftGameJoinTableId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Game readEntity(Cursor cursor, int offset) {
        Game entity = new Game( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // Winner
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // Games
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // Round
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // Draws
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // PlayerAPoints
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // PlayerBPoints
            cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7), // PlayerAGameJoinTableId
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // PlayerBGameJoinTableId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // DraftGameJoinTableId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Game entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setWinner(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGames(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setRound(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setDraws(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPlayerAPoints(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setPlayerBPoints(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setPlayerAGameJoinTableId(cursor.isNull(offset + 7) ? null : cursor.getLong(offset + 7));
        entity.setPlayerBGameJoinTableId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDraftGameJoinTableId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Game entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Game entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "PlayerAInGame" to-many relationship of Player. */
    public List<Game> _queryPlayer_PlayerAInGame(Long PlayerAGameJoinTableId) {
        synchronized (this) {
            if (player_PlayerAInGameQuery == null) {
                QueryBuilder<Game> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayerAGameJoinTableId.eq(null));
                player_PlayerAInGameQuery = queryBuilder.build();
            }
        }
        Query<Game> query = player_PlayerAInGameQuery.forCurrentThread();
        query.setParameter(0, PlayerAGameJoinTableId);
        return query.list();
    }

    /** Internal query to resolve the "PlayerBInGame" to-many relationship of Player. */
    public List<Game> _queryPlayer_PlayerBInGame(Long PlayerBGameJoinTableId) {
        synchronized (this) {
            if (player_PlayerBInGameQuery == null) {
                QueryBuilder<Game> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayerBGameJoinTableId.eq(null));
                player_PlayerBInGameQuery = queryBuilder.build();
            }
        }
        Query<Game> query = player_PlayerBInGameQuery.forCurrentThread();
        query.setParameter(0, PlayerBGameJoinTableId);
        return query.list();
    }

    /** Internal query to resolve the "DraftsInGame" to-many relationship of Draft. */
    public List<Game> _queryDraft_DraftsInGame(Long DraftGameJoinTableId) {
        synchronized (this) {
            if (draft_DraftsInGameQuery == null) {
                QueryBuilder<Game> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DraftGameJoinTableId.eq(null));
                draft_DraftsInGameQuery = queryBuilder.build();
            }
        }
        Query<Game> query = draft_DraftsInGameQuery.forCurrentThread();
        query.setParameter(0, DraftGameJoinTableId);
        return query.list();
    }

}
