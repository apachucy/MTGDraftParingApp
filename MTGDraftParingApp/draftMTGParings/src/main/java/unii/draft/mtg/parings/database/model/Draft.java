package unii.draft.mtg.parings.database.model;

import java.util.List;
import unii.draft.mtg.parings.database.model.DaoSession;
import de.greenrobot.dao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table "DRAFT".
 */
public class Draft {

    private Long id;
    private String DraftName;
    private String DraftDate;
    private Integer DraftRounds;
    private Integer NumberOfPlayers;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient DraftDao myDao;

    private List<PlayerDraftJoinTable> Drafts;
    private List<Game> DraftsInGame;

    public Draft() {
    }

    public Draft(Long id) {
        this.id = id;
    }

    public Draft(Long id, String DraftName, String DraftDate, Integer DraftRounds, Integer NumberOfPlayers) {
        this.id = id;
        this.DraftName = DraftName;
        this.DraftDate = DraftDate;
        this.DraftRounds = DraftRounds;
        this.NumberOfPlayers = NumberOfPlayers;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDraftDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getDraftName() {
        return DraftName;
    }

    public void setDraftName(String DraftName) {
        this.DraftName = DraftName;
    }

    public String getDraftDate() {
        return DraftDate;
    }

    public void setDraftDate(String DraftDate) {
        this.DraftDate = DraftDate;
    }

    public Integer getDraftRounds() {
        return DraftRounds;
    }

    public void setDraftRounds(Integer DraftRounds) {
        this.DraftRounds = DraftRounds;
    }

    public Integer getNumberOfPlayers() {
        return NumberOfPlayers;
    }

    public void setNumberOfPlayers(Integer NumberOfPlayers) {
        this.NumberOfPlayers = NumberOfPlayers;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<PlayerDraftJoinTable> getDrafts() {
        if (Drafts == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            PlayerDraftJoinTableDao targetDao = daoSession.getPlayerDraftJoinTableDao();
            List<PlayerDraftJoinTable> DraftsNew = targetDao._queryDraft_Drafts(id);
            synchronized (this) {
                if(Drafts == null) {
                    Drafts = DraftsNew;
                }
            }
        }
        return Drafts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDrafts() {
        Drafts = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Game> getDraftsInGame() {
        if (DraftsInGame == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            GameDao targetDao = daoSession.getGameDao();
            List<Game> DraftsInGameNew = targetDao._queryDraft_DraftsInGame(id);
            synchronized (this) {
                if(DraftsInGame == null) {
                    DraftsInGame = DraftsInGameNew;
                }
            }
        }
        return DraftsInGame;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetDraftsInGame() {
        DraftsInGame = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
