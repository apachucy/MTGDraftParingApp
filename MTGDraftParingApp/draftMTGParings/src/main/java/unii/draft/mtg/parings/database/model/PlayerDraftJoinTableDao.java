package unii.draft.mtg.parings.database.model;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import unii.draft.mtg.parings.database.model.PlayerDraftJoinTable;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAYER_DRAFT_JOIN_TABLE".
*/
public class PlayerDraftJoinTableDao extends AbstractDao<PlayerDraftJoinTable, Long> {

    public static final String TABLENAME = "PLAYER_DRAFT_JOIN_TABLE";

    /**
     * Properties of entity PlayerDraftJoinTable.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property PlayerMatchPoints = new Property(1, Integer.class, "PlayerMatchPoints", false, "PLAYER_MATCH_POINTS");
        public final static Property PlayerMatchOverallWin = new Property(2, Float.class, "PlayerMatchOverallWin", false, "PLAYER_MATCH_OVERALL_WIN");
        public final static Property OponentsMatchOveralWins = new Property(3, Float.class, "OponentsMatchOveralWins", false, "OPONENTS_MATCH_OVERAL_WINS");
        public final static Property PlayerGamesOverallWin = new Property(4, Float.class, "PlayerGamesOverallWin", false, "PLAYER_GAMES_OVERALL_WIN");
        public final static Property OponentsGamesOverallWin = new Property(5, Float.class, "OponentsGamesOverallWin", false, "OPONENTS_GAMES_OVERALL_WIN");
        public final static Property Dropped = new Property(6, Boolean.class, "Dropped", false, "DROPPED");
        public final static Property PlayerPlace = new Property(7, Integer.class, "playerPlace", false, "PLAYER_PLACE");
        public final static Property PlayerDraftJoinTableId = new Property(8, Long.class, "playerDraftJoinTableId", false, "PLAYER_DRAFT_JOIN_TABLE_ID");
        public final static Property DraftPlayerJoinTableId = new Property(9, Long.class, "draftPlayerJoinTableId", false, "DRAFT_PLAYER_JOIN_TABLE_ID");
    };

    private Query<PlayerDraftJoinTable> player_PlayersQuery;
    private Query<PlayerDraftJoinTable> draft_DraftsQuery;

    public PlayerDraftJoinTableDao(DaoConfig config) {
        super(config);
    }
    
    public PlayerDraftJoinTableDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAYER_DRAFT_JOIN_TABLE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"PLAYER_MATCH_POINTS\" INTEGER," + // 1: PlayerMatchPoints
                "\"PLAYER_MATCH_OVERALL_WIN\" REAL," + // 2: PlayerMatchOverallWin
                "\"OPONENTS_MATCH_OVERAL_WINS\" REAL," + // 3: OponentsMatchOveralWins
                "\"PLAYER_GAMES_OVERALL_WIN\" REAL," + // 4: PlayerGamesOverallWin
                "\"OPONENTS_GAMES_OVERALL_WIN\" REAL," + // 5: OponentsGamesOverallWin
                "\"DROPPED\" INTEGER," + // 6: Dropped
                "\"PLAYER_PLACE\" INTEGER," + // 7: playerPlace
                "\"PLAYER_DRAFT_JOIN_TABLE_ID\" INTEGER," + // 8: playerDraftJoinTableId
                "\"DRAFT_PLAYER_JOIN_TABLE_ID\" INTEGER);"); // 9: draftPlayerJoinTableId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAYER_DRAFT_JOIN_TABLE\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, PlayerDraftJoinTable entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer PlayerMatchPoints = entity.getPlayerMatchPoints();
        if (PlayerMatchPoints != null) {
            stmt.bindLong(2, PlayerMatchPoints);
        }
 
        Float PlayerMatchOverallWin = entity.getPlayerMatchOverallWin();
        if (PlayerMatchOverallWin != null) {
            stmt.bindDouble(3, PlayerMatchOverallWin);
        }
 
        Float OponentsMatchOveralWins = entity.getOponentsMatchOveralWins();
        if (OponentsMatchOveralWins != null) {
            stmt.bindDouble(4, OponentsMatchOveralWins);
        }
 
        Float PlayerGamesOverallWin = entity.getPlayerGamesOverallWin();
        if (PlayerGamesOverallWin != null) {
            stmt.bindDouble(5, PlayerGamesOverallWin);
        }
 
        Float OponentsGamesOverallWin = entity.getOponentsGamesOverallWin();
        if (OponentsGamesOverallWin != null) {
            stmt.bindDouble(6, OponentsGamesOverallWin);
        }
 
        Boolean Dropped = entity.getDropped();
        if (Dropped != null) {
            stmt.bindLong(7, Dropped ? 1L: 0L);
        }
 
        Integer playerPlace = entity.getPlayerPlace();
        if (playerPlace != null) {
            stmt.bindLong(8, playerPlace);
        }
 
        Long playerDraftJoinTableId = entity.getPlayerDraftJoinTableId();
        if (playerDraftJoinTableId != null) {
            stmt.bindLong(9, playerDraftJoinTableId);
        }
 
        Long draftPlayerJoinTableId = entity.getDraftPlayerJoinTableId();
        if (draftPlayerJoinTableId != null) {
            stmt.bindLong(10, draftPlayerJoinTableId);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public PlayerDraftJoinTable readEntity(Cursor cursor, int offset) {
        PlayerDraftJoinTable entity = new PlayerDraftJoinTable( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // PlayerMatchPoints
            cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2), // PlayerMatchOverallWin
            cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3), // OponentsMatchOveralWins
            cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4), // PlayerGamesOverallWin
            cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5), // OponentsGamesOverallWin
            cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0, // Dropped
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // playerPlace
            cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8), // playerDraftJoinTableId
            cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9) // draftPlayerJoinTableId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, PlayerDraftJoinTable entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPlayerMatchPoints(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlayerMatchOverallWin(cursor.isNull(offset + 2) ? null : cursor.getFloat(offset + 2));
        entity.setOponentsMatchOveralWins(cursor.isNull(offset + 3) ? null : cursor.getFloat(offset + 3));
        entity.setPlayerGamesOverallWin(cursor.isNull(offset + 4) ? null : cursor.getFloat(offset + 4));
        entity.setOponentsGamesOverallWin(cursor.isNull(offset + 5) ? null : cursor.getFloat(offset + 5));
        entity.setDropped(cursor.isNull(offset + 6) ? null : cursor.getShort(offset + 6) != 0);
        entity.setPlayerPlace(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPlayerDraftJoinTableId(cursor.isNull(offset + 8) ? null : cursor.getLong(offset + 8));
        entity.setDraftPlayerJoinTableId(cursor.isNull(offset + 9) ? null : cursor.getLong(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(PlayerDraftJoinTable entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(PlayerDraftJoinTable entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "Players" to-many relationship of Player. */
    public List<PlayerDraftJoinTable> _queryPlayer_Players(Long playerDraftJoinTableId) {
        synchronized (this) {
            if (player_PlayersQuery == null) {
                QueryBuilder<PlayerDraftJoinTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.PlayerDraftJoinTableId.eq(null));
                player_PlayersQuery = queryBuilder.build();
            }
        }
        Query<PlayerDraftJoinTable> query = player_PlayersQuery.forCurrentThread();
        query.setParameter(0, playerDraftJoinTableId);
        return query.list();
    }

    /** Internal query to resolve the "Drafts" to-many relationship of Draft. */
    public List<PlayerDraftJoinTable> _queryDraft_Drafts(Long draftPlayerJoinTableId) {
        synchronized (this) {
            if (draft_DraftsQuery == null) {
                QueryBuilder<PlayerDraftJoinTable> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.DraftPlayerJoinTableId.eq(null));
                draft_DraftsQuery = queryBuilder.build();
            }
        }
        Query<PlayerDraftJoinTable> query = draft_DraftsQuery.forCurrentThread();
        query.setParameter(0, draftPlayerJoinTableId);
        return query.list();
    }

}
